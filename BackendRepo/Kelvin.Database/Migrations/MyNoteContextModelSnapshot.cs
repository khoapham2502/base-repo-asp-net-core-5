// <auto-generated />
using System;
using Kelvin.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Kelvin.Database.Migrations
{
    [DbContext(typeof(MyNoteContext))]
    partial class MyNoteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Kelvin.Core.Model.NoteContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Contents")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("IdNote")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdNote");

                    b.ToTable("NoteContent");
                });

            modelBuilder.Entity("Kelvin.Core.Model.NoteFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileUrl")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("IdContent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdContent");

                    b.ToTable("NoteFiles");
                });

            modelBuilder.Entity("Kelvin.Core.Model.Notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatesCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Keys")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("notes");
                });

            modelBuilder.Entity("Kelvin.Core.Model.NoteContent", b =>
                {
                    b.HasOne("Kelvin.Core.Model.Notes", "notes")
                        .WithMany("noteContent")
                        .HasForeignKey("IdNote")
                        .HasConstraintName("FK_NoteContent_Notes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("notes");
                });

            modelBuilder.Entity("Kelvin.Core.Model.NoteFiles", b =>
                {
                    b.HasOne("Kelvin.Core.Model.NoteContent", "noteContent")
                        .WithMany("noteFiles")
                        .HasForeignKey("IdContent")
                        .HasConstraintName("FK_NoteFiles_NoteContent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("noteContent");
                });

            modelBuilder.Entity("Kelvin.Core.Model.NoteContent", b =>
                {
                    b.Navigation("noteFiles");
                });

            modelBuilder.Entity("Kelvin.Core.Model.Notes", b =>
                {
                    b.Navigation("noteContent");
                });
#pragma warning restore 612, 618
        }
    }
}
